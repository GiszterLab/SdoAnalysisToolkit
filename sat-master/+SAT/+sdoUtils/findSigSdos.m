%% Screen SDOs (struct) for significance
% Simple utility to screen the 'sdo' struct for particular spike-triggered
% SDOs which are demonstrate significance on at least SIG_THRESH tests. 
%
% PREREQUISITE: 
%   computeSDO.testStatSig()
%
% INPUT: 
%   sdo - structure, as generated by computeSDO
%   SIG_THRESH: 
%       - Integer. Minimum number of significant tests to pass screen.
%       [0-3]. 
% OUTPUT: 
%   lookupStruct - structure containing the row and column indices, and
%       channel  names of screened SDOs, along with their signifcance
%       score.
%

% Copyright (C) 2023  Trevor S. Smith
%  Drexel University College of Medicine
% 
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <https://www.gnu.org/licenses/>.


function [lookupStruct]= findSigSdos(sdoStruct, SIG_THRESH)
%// Keep in mind, may need to eventually scan across MULTIPLE 'sdo'
%structures, to back-compile

if ~exist('SIG_THRESH', 'var')
   SIG_THRESH = 0; 
end

N_PP_CHANNELS   = length(sdoStruct(1).sdos); %numberNeurons
N_XT_CHANNELS   = length(sdoStruct); %number EMG

%// Buffer cell to hold the data/analysis

MAX_ELEMS = N_PP_CHANNELS * N_XT_CHANNELS; 
lookupStruct = struct(... 
        'xtChannelNo', cell(1,MAX_ELEMS), ... 
        'ppChannelNo', cell(1,MAX_ELEMS), ... 
        'xtChannelID', cell(1,MAX_ELEMS), ... 
        'ppChannelID', cell(1,MAX_ELEMS), ... 
        'nSpikes',     cell(1,MAX_ELEMS), ...
        'sigPx0',      cell(1,MAX_ELEMS), ... 
        'nSigValues',  cell(1,MAX_ELEMS), ...
        'nBackgroundSigtVals', cell(1,MAX_ELEMS)); 

%iterate across all units, across all muscles (m1u1, m1u2, m1u3... m2u1..)

%sfields     = fields(sdo(1).stats{1}); 

% 3.20.2024 - Update to enhanced statfields

%
sig_sfields = fields(sdoStruct(1).stats{1}.isSig_Unit); 
%sig_sfields = sfields(contains(sfields, 'isSig')); 
%}

for m = 1:N_XT_CHANNELS 
    for u =1:N_PP_CHANNELS
        ypos = (m-1)*N_PP_CHANNELS+u;
        lookupStruct(ypos).xtChannelNo = m; 
        lookupStruct(ypos).ppChannelNo = u; 
        lookupStruct(ypos).xtChannelID = sdoStruct(m).signalType; 
        lookupStruct(ypos).ppChannelID = sdoStruct(m).neuronNames{u}; 
        score = 0; 
        bkgd_score = 0; %for when shuffles deviate from background; 
        %
        for ii = 1:length(sig_sfields)
            score = score + any(sdoStruct(m).stats{u}.isSig_Unit.(sig_sfields{ii}), 'all'); 
            %score = score + any(sdo(m).stats{u}.(sig_sfields{ii}), 'all'); 
        end
        lookupStruct(ypos).sigPx0 = sdoStruct(m).stats{u}.isSig_Unit.kld_px0_raw; 

        for ii = 1:length(sig_sfields)
            bkgd_score = bkgd_score + any(sdoStruct(m).stats{u}.isSig_Bkgd.(sig_sfields{ii}), 'all'); 
        end
        lookupStruct(ypos).nSigValues = score; 
        lookupStruct(ypos).nBackgroundSigVals = bkgd_score; 
        try
            lookupStruct(ypos).nSpikes  =  sdoStruct(m).stats{u}.nEvents; 
        catch
            %older method
            lookupStruct(ypos).nSpikes = 0; 
        end
    end
end    

LI = [lookupStruct(:).nSigValues] >=SIG_THRESH; 
lookupStruct = lookupStruct(LI); 

end
